#!/bin/bash
#Dont force dialog on pcs that dont have dialog installed
if [ ! -x "$(command -v dialog)" ]; then
#Init text
    echo "Cathook Pre-Installer"
    echo
    echo "What you wish to do?"
    exit
fi

DISTRO="$(awk -F= '$1=="ID" { print $2 ;}' /etc/os-release)"
HEIGHT=15
WIDTH=40
CHOICE_HEIGHT=4
BACKTITLE="Cathook AiO Installer"
TITLE="Fork Select"
MENU="Choose from which fork you wish to install:"
URL=""
ERR=""

clear

#this doesnt work :(
#if [ -d "catbot-setup/" ]; then
#    dialog --title "Warning" --yesno "You have already installed cathook to your computer. Do you wish to continue?" 6 60
#        dialog --title "Warning" --msgbox "$response"
#	   response=$?
#case $response in
#   0) continue;;
#   1) exit 0;;
#esac
#fi

OPT=(1 "Install Cathook"
        2 "Install Catbot"
        3 "Check for dependencies")
        

BASE=$(dialog --clear \
            --backtitle "$BACKTITLE" \
            --title "Components" \
            --menu "What do you wish to do?" \
            $HEIGHT $WIDTH $CHOICE_HEIGHT \
           "${OPT[@]}" \
           2>&1 >/dev/tty)
case $BASE in
        1)
         choiceA=$(dialog --backtitle "$BACKTITLE" --title "$TITLE" --ok-label "Select" --cancel-label "Cancel" --input-fd 2 --output-fd 1 --menu "$MENU" 15 40 5 1 "nullworks/cathook" 2 "explowz/cathook" 3 "misc/cathook")
         echo $choiceA
        stty sane
       case $choiceA in
        1)
        	clear
        stty sane
           URL="nullworks/cathook"
           #echo -e "[\033[0;36mLOG\033[0m][\033[5;1;33mWAIT\033[0m] Installing \033[1;34mnullworks\033[0m/\033[1;34mcathook\033[0m\033[0m..."
           #git clone https://github.com/$URL
           echo '' > /tmp/gitprocfile;git clone https://github.com/${URL} --progress 2>&1 | cat > /tmp/gitprocfile &
           declare -i COUNTER=1 
    { 
        while test $COUNTER -le 100 
        do 
         echo $(grep -o -P '[0-9]*(\.[0-9]*)?(?=%)' /tmp/gitprocfile | tail -1)
         done
    } |  continue | dialog --keep-window  --backtitle "$BACKTITLE" --title "Install"  --gauge "Downloading files..."  7 50 0
    echo "Starting build"
    pushd cathook/
    ./install-all 2>&1 | tee -a /tmp/clone.$$ &> /dev/null &
    dialog --backtitle "$BACKTITLE"  --title "Install: Building" --tailbox /tmp/clone.$$ 20 95
    popd
    dialog --title "Installation complete" --msgbox "Cathook has installed successfully." 6 60
               ;;
               
                       2)
                       	clear
        stty sane
            URL="explowz/cathook"
            echo '' > /tmp/gitprocfile;git clone https://github.com/${URL} --progress 2>&1 | cat > /tmp/gitprocfile &
            #git clone https://github.com/${URL} --progress 2>&1 | tee -a /tmp/clone.$$ &> /dev/null &
            #dialog --backtitle "$BACKTITLE"  --title "Install" --tailbox /tmp/clone.$$ 7 60
             #COUNTER=$(grep -o -P '[0-9]*(\.[0-9]*)?(?=%)' /tmp/gitprocfile | tail -1) | dialog  --backtitle "$BACKTITLE" --title "Install"  --gauge "Downloading..."  7 50 0
            #cat /tmp/gitprocfile | grep "[0-9]\{1,2\}%" | awk '{print $7}' | dialog  --backtitle "$BACKTITLE" --title "Install"  --gauge "Downloading..."  7 50 0
            #COUNTER=$(tail -1 /tmp/gitprocfile | grep -o '[^ ]*%' |  sed 's/.$//' )
            #tail -1 /tmp/gitprocfile | grep -o '[^ ]*%' |  sed 's/.$//' | dialog  --backtitle "$BACKTITLE" --title "Install"  --gauge "Downloading..."  7 50 0
declare -i COUNTER=1 
    { 
        while test $COUNTER -le 100 
        do 
         echo $(grep -o -P '[0-9]*(\.[0-9]*)?(?=%)' /tmp/gitprocfile | tail -1)
         done
    } |  continue | dialog --keep-window  --backtitle "$BACKTITLE" --title "Install"  --gauge "Downloading files..."  7 50 0
    echo "Starting build"
    pushd cathook/
    ./install-all 2>&1 | tee -a /tmp/clone.$$ &> /dev/null &
    dialog --backtitle "$BACKTITLE"  --title "Install: Building" --tailbox /tmp/clone.$$ 20 95
    popd
    dialog --title "Installation complete" --msgbox "Cathook has installed successfully." 6 60
            ;;
        3)
           user_input=$(dialog --clear \
            --backtitle "$BACKTITLE"  \
            --title "Enter Name" \
            --inputbox "Enter fork name you wish to install. (ikeakayke/cathook)" 10 40 \
    3>&1 1>&2 2>&3 3>&- \
    )
        URL=$user_input 
	if [ -z "$URL" ]; then
	   ERR="URL field cannot be empty"
	   echo -e "\033[0;40m"
   	   dialog --title "Error" --msgbox "$ERR" 5 30
	fi
           
           echo $URL
           git clone https://github.com/$URL
           #exec "$0"
            ;;      
esac
            ;;
        2)
        clear
         stty sane
            URL="nullworks/catbot-setup"
           echo -e "[\033[1;33mWAIT\033[0m] Installing \033[1;34mnullworks\033[0m/\033[1;34mcatbot-setup\033[0m\033[0m..."
          git clone https://github.com/$URL
          pushd catbot-setup/
          ./install-catbots
          popd
          read -p "Press ENTER key to return."
          exec "$0"
            ;;
         3)
	gentoo_packages=(dev-vcs/git dev-libs/boost dev-util/cmake sys-devel/gcc sys-devel/gdb media-libs/libsdl2 media-libs/glew media-libs/freetype net-misc/rsync media-libs/libglvnd dev-util/dialog net-misc/curl)
	arch_packages=(git boost cmake make gcc gdb lib32-sdl2 lib32-glew lib32-freetype2 rsync lib32-libglvnd dialog curl)
	ubuntu_packages=(build-essential git g++ g++-multilib libboost-dev gdb libsdl2-dev:i386 libfreetype6-dev:i386 cmake dialog rsync curl)
	debian_packages=(build-essential git g++ g++-multilib libboost-dev gdb libsdl2-dev:i386 libfreetype6-dev:i386 cmake dialog rsync curl)
	fedora_packages=(cmake dialog make gcc-c++ glibc-devel.i686 freetype-devel.i686 SDL2-devel.i686 glew-devel.i686 boost-devel rsync gdb git curl)
	void_packages=(git gcc gdb gcc-multilib boost boost-devel-32bit SDL2-devel-32bit glew-devel-32bit freetype-devel-32bit libglvnd-devel-32bit rsync curl)
	clear
        stty sane
        echo -e "[\033[0;36mLOG\033[0m][\033[5;1;33mWAIT\033[0m] Started checking for \033[1;34mdependencies\033[0m\033[0m at \033[1;34m$(date)\033[0m\033[0m..."
case "$DISTRO" in
    "gentoo")
        [ "$(type emerge)" ] || { printf "/etc/os-release outputs 'ID=gentoo' but Portage is not present, exiting.."; exit; }
        OS="gentoo"
    ;;
    "manjaro")
        [ "$(type pacman)" ] || { printf "/etc/os-release outputs 'ID=manjaro' but Pacman is not present, exiting.."; exit; }
        OS="arch"
    ;;
    "garuda")
        [ "$(type pacman)" ] || { printf "/etc/os-release outputs 'ID=garuda' but Pacman is not present, exiting.."; exit; }
        OS="arch"
    ;;
    "arch")
        [ "$(type pacman)" ] || { printf "/etc/os-release outputs 'ID=arch' but Pacman is not present, exiting.."; exit; }
        OS="arch"
    ;;
    "ubuntu")
        [ "$(type apt-get)" ] || { printf "/etc/os-release outputs 'ID=ubuntu' but APT is not present, exiting.."; exit; }
        OS="ubuntu"
    ;;
    "debian")
        [ "$(type apt-get)" ] || { printf "/etc/os-release outputs 'ID=debian' but APT is not present, exiting.."; exit; }
        OS="debian"
    ;;
    # package names are the same. Also kitware's Ubuntu CMake works just fine on Debian
    "fedora")
        [ "$(type dnf)" ] || { printf "/etc/os-release outputs 'ID=fedora' but DNF is not present, exiting.."; exit; }
        OS="fedora"
    ;;
    '"void"')
        [ "$(type xbps-install)" ] || { printf "/etc/os-release outputs 'ID=void' but XBPS is not present, exiting.."; exit; }
        OS="void"
    ;;
esac

case "$OS" in
    "gentoo")
        # -U (--newuse): Installed packages that have no changes are excluded.
        USE=abi_x86_32 sudo emerge -vU "${gentoo_packages[@]}"
        read -p "Press ENTER key to return."
        exec "$0"
    ;;
    "arch")
        pacman -Qi "${arch_packages[@]}" > /dev/null 2>&1
        out=$?
        if [ "$out" = 1 ]; then
            sudo pacman -S --noconfirm --needed "${arch_packages[@]}"
            read -p "Press ENTER key to return."
            exec "$0"
        fi
    ;;
    "ubuntu")
        dpkg -s "${ubuntu_packages[@]}" > /dev/null 2>&1
        out=$?
        if [ "$out" = 0 ]; then
            dpkg --compare-versions "$(dpkg-query --show --showformat '${Version}' cmake)" ge 3.12
            out=$?
        fi
        if [ "$out" = 1 ]; then
            pkgs="${ubuntu_packages[*]}"
            sudo bash -c "apt-get update;dpkg --add-architecture i386;apt-get update;apt-get install -y $pkgs"
            # Check if cmake is up to date enough
            dpkg --compare-versions "$(dpkg-query --show --showformat '${Version}' cmake)" ge 3.12
            out=$?
            if [ "$out" = 1 ]; then
                sudo bash -c "apt install -y software-properties-common && wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | apt-key add - && apt-add-repository -y 'deb https://apt.kitware.com/ubuntu/ $(lsb_release -c -s) main' && apt-get install -y cmake kitware-archive-keyring"
            fi
        fi
    ;;
    "debian")
	dpkg -s "${debian_packages[@]}" > /dev/null 2>&1
	out=$?
        if [ "$out" = 0 ]; then
            dpkg --compare-versions "$(dpkg-query --show --showformat '${Version}' cmake)" ge 3.12
            out=$?
        fi
        if [ "$out" = 1 ]; then
            pkgs="${debian_packages[*]}"
            sudo bash -c "apt-get update;dpkg --add-architecture i386;apt-get update;apt-get install -y $pkgs"
            # Check if cmake is up to date enough
            dpkg --compare-versions "$(dpkg-query --show --showformat '${Version}' cmake)" ge 3.12
            out=$?
            if [ "$out" = 1 ]; then
                sudo bash -c "apt-get install -y cmake"
            fi
        fi
    ;;
    "fedora")
        rpm -q "${fedora_packages[@]}" > /dev/null 2>&1
        out=$?
        if [ "$out" != 0 ]; then
            sudo dnf install -y "${fedora_packages[@]}"
            read -p "Press ENTER key to return."
            exec "$0"
        fi
    ;;
    "void")
        xbps-query "${void_packages[@]}" > /dev/null 2>&1
        out=$?
        if [ "$out" = 1 ]; then
            # libs and dev files require this repo to be enabled
            sudo xbps-install -S void-repo-multilib
            sudo xbps-install -S "${void_packages[@]}"
            echo -e "[\033[0;36mLOG\033[0m][\033[0;32mOK\033[0m] Finished checking for \033[1;34mdependencies\033[0m\033[0m at \033[1;34m$(date)\033[0m\033[0m..."
            read -p "Press ENTER key to return."
            exec "$0"
        fi
    ;;
    "*")
    printf "\033[1;33m\nWarning! Automatic package installation is not supported!\n\033[0m"
    ;;
    
esac


    ;;
esac
clear
echo -e "[\033[0;36mLOG\033[0m][\033[1;33mWAIT\033[0m] Started exitting"
echo -e "[\033[0;36mLOG\033[0m][\033[1;33mWAIT\033[0m] Restore terminal sanity to \033[1;34msane\033[0m\033[0m..."
echo -e "[\033[0;36mLOG\033[0m][\033[0;32mOK\033[0m] Restore terminal sanity to \033[1;34msane\033[0m\033[0m..."
echo -e "[\033[0;36mLOG\033[0m][\033[0;32mOK\033[0m] Started exitting"
echo "AiO installer has now quit."
stty sane
